{"version":3,"sources":["JsonLoader/index.js","utils/svgUtils.js","utils/proportions.js","CountrySvg/index.js","Country/index.js","utils/geojsonUtils.js","App.js","registerServiceWorker.js","index.js"],"names":["JsonLoader","props","react_default","a","createElement","className","label","accept","type","onChange","event","reader","FileReader","onload","event2","obj","JSON","parse","target","result","onLoad","readAsText","files","getLatLonBoundsFromViewBox","viewbox","_viewbox","Object","slicedToArray","minX","minY","width","height","northWest","merc","fromPointToLatLng","x","y","southEast","getViewBoxFromElement","element","getAttribute","split","map","string","parseFloat","getSvgBoundaries","viewBox","_viewBox","maxX","maxY","getBoundariesFromViewBox","updateSvgElementViewBox","_viewBox2","setAttribute","concat","makeSvgElementSquare","_getViewBoxFromElemen","_getViewBoxFromElemen2","makeSVGExportable","svgCode","document","innerHTML","svgElement","querySelector","Array","from","childNodes","forEach","child","maskElement","rectangle","appendChild","insertBefore","firstChild","outerHTML","maskSVG","size","scaleFactor","xTranslate","yTranslate","querySelectorAll","path","pathString","newPath","command","newValues","values","length","objectSpread","transformCommand","stringify","makeSVGSize","getRelativePosition","min","max","getStateFromSvgAndProps","limitedViewBox","lastUsedViewBox","svg","__html","notifySvgChanged","state","onChangeSvgDisplayed","latLonBounds","countryCode","countryInfo","country_code","CountrySvg","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","loading","svgRef","React","createRef","initSvg","bind","assertThisInitialized","initRegion","onRegionChange","initSvgTimeout","setTimeout","allowSelectArea","regionReady","RegionSelect_default","maxRegions","regions","constraint","dangerouslySetInnerHTML","ref","canShowDot","style","getDotStyle","latLonToProject","lat","lon","clearTimeout","getNewSvgElement","setState","onInitSvgBoundaries","initialRegion","data","onChangeAreaSelection","changes","regionChange","isChanging","current","pixelInfo","latlon","svgBoundaries","boundingBox","_merc$fromLatLngToPoi","fromLatLngToPoint","lng","relativeX","relativeY","projectLatLonIntoArea","getBoundingClientRect","top","left","geojson2svg","styles","MultiPolygon","fill","stroke","projection","coord","projected","render","DOMParser","parseFromString","toString","newState","Component","Country","updateLat","updateLon","handleInitSvgBoundaries","handleChangeAreaSelection","latLonToShow","properties","NAME","src_CountrySvg","onSvgChanged","value","newBounds","svgBounds","newArea","originalViewBox","selection","_originalViewBox","newWidth","newHeight","getLimitedViewBoxFromSelection","predefinedBounds","getCountryName","country","name","App","countries","filter","handleJsonLoad","filterChanged","downloadAll","handleSvgChanged","reset","handleBoundsJsonLoad","_this2","onClick","src_JsonLoader","Fragment","toLowerCase","indexOf","countryContainsFilter","src_Country","key","getPredefinedBoundsForCountry","geojson","maxCountries","arguments","undefined","limited","assign","ISO_A2","FIPS_10_","WB_A2","iso_a2","fips_10_","wb_a2","getCountryCode","countryType","TYPE","includes","shouldRemoveCountry","slice","sortBy","processCountries","features","svgsInfo","allSvgs","svgInfo","boundsInfo","json","getBoundsInfo","zip","JSZip","file","generateAsync","then","blob","saveAs","err","console","warn","changeInfo","bounds","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","log","catch","error","ReactDOM","src_App_0","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.89072e38.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './style.css';\n\nconst JsonLoader = (props) => {\n    return (\n        <label className=\"JsonLoader\">\n            { props.label }\n\n            <input\n                accept=\".geojson, .json\"\n                type=\"file\"\n                onChange={\n                    (event) => {\n                        const reader = new FileReader();\n                        reader.onload = onReaderLoad;\n                        reader.readAsText(event.target.files[0]);\n\n                        function onReaderLoad(event2){\n                            const obj = JSON.parse(event2.target.result);\n                            props.onLoad(obj);\n                        }\n                    }\n                }\n            />\n        </label>\n    );\n}\n\nJsonLoader.propTypes = {\n    label: PropTypes.string,\n    onLoad: PropTypes.func.isRequired\n};\n\nexport default JsonLoader;\n","import merc from 'mercator-projection';\nimport { parse, stringify } from 'svg-path-tools';\n\nexport const getLatLonBoundsFromViewBox = (viewbox) => {\n    const [minX, minY, width, height] = viewbox;\n    return {\n        northWest: merc.fromPointToLatLng({ x: minX, y: minY }),\n        southEast: merc.fromPointToLatLng({ x: minX + width, y: minY + height }),\n    };\n};\n\nexport const getViewBoxFromElement = (element) => {\n    const viewBox = element.getAttribute('viewBox');\n    return viewBox.split(' ').map(string => parseFloat(string));\n};\n\n\nexport const getSvgBoundaries = (element) => {\n    return getBoundariesFromViewBox(getViewBoxFromElement(element));\n};\n\nfunction getBoundariesFromViewBox(viewBox) {\n    const [minX, minY, width, height] = viewBox;\n    return {\n        minX,\n        minY,\n        maxX: minX + width,\n        maxY: minY + height,\n    };\n}\n\nexport const updateSvgElementViewBox = (element, viewBox) => {\n    const [minX, minY, width, height] = viewBox;\n    element.setAttribute('viewBox', `${minX} ${minY} ${width} ${height}`);\n    return element;\n};\n\nexport const makeSvgElementSquare = (element) => {\n    let [minX, minY, width, height] = getViewBoxFromElement(element);\n\n    if(width < height) {\n        const diff = height - width;\n        minX = minX - (diff / 2);\n        width = height;\n    } else {\n        const diff = width - height;\n        minY = minY - (diff / 2);\n        height = width;\n    }\n\n    updateSvgElementViewBox(element, [minX, minY, width, height]);\n    return [minX, minY, width, height];\n};\n\nexport const getLimitedViewBoxFromSelection = (originalViewBox, selection) => {\n    const [minX, minY, width, height] = originalViewBox;\n    const newWidth = width * selection.width / 100;\n    const newHeight = height * selection.height / 100;\n    const newMinX = minX + (selection.x * width / 100);\n    const newMinY = minY + (selection.y * height / 100);\n    return [newMinX, newMinY, newWidth, newHeight];\n};\n\nexport const makeSVGExportable = (svgCode, viewBox) => {\n    const correctSizedSVG = makeSVGSize(svgCode, 100);\n    return maskSVG(correctSizedSVG);\n};\n\nfunction makeSVGSize(svgCode, size) {\n    const element = document.createElement('div');\n    element.innerHTML = svgCode;\n    const svgElement = element.querySelector('svg');\n\n    const viewBox = getViewBoxFromElement(svgElement);\n    const scaleFactor = size / viewBox[2];\n    const xTranslate = -viewBox[0];\n    const yTranslate = -viewBox[1];\n    updateSvgElementViewBox(svgElement, [0, 0, size, size]);\n    const allPaths = Array.from(svgElement.querySelectorAll('path'));\n    allPaths.forEach((path) => {\n        const pathString = path.getAttribute('d');\n        const parsedPath = parse(pathString);\n        const newPath = parsedPath.map(command => transformCommand(command, scaleFactor, xTranslate, yTranslate));\n        path.setAttribute('d', stringify(newPath));\n    });\n\n    return svgElement.outerHTML;\n}\n\nfunction transformCommand(command, scaleFactor, xTranslate, yTranslate) {\n    let newValues = command.values;\n    if(newValues.length === 2) {\n        newValues[0] = (newValues[0] + xTranslate) * scaleFactor;\n        newValues[1] = (newValues[1] + yTranslate) * scaleFactor;\n    }\n    return {\n        ...command,\n        values: newValues\n    };\n}\n\nfunction maskSVG(svgCode) {\n    const element = document.createElement('div');\n    element.innerHTML = svgCode;\n    const svgElement = element.querySelector('svg');\n\n    const viewBox = getViewBoxFromElement(svgElement);\n    Array.from(svgElement.childNodes).forEach(child => child.setAttribute('mask', 'url(#viewBoxMask)'));\n    const maskElement = document.createElement('mask');\n    maskElement.setAttribute('id', 'viewBoxMask');\n    const rectangle = document.createElement('rect');\n    rectangle.setAttribute('x', viewBox[0]);\n    rectangle.setAttribute('y', viewBox[1]);\n    rectangle.setAttribute('width', viewBox[2]);\n    rectangle.setAttribute('height', viewBox[3]);\n    rectangle.setAttribute('fill', 'white');\n    maskElement.appendChild(rectangle);\n    svgElement.insertBefore(maskElement, svgElement.firstChild);\n    return svgElement.outerHTML;\n}\n","export const getRelativePosition = (x, min, max) => {\n    return (x - min) / (max - min);\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport geojson2svg from 'geojson-to-svg';\nimport RegionSelect from 'react-region-select';\nimport merc from 'mercator-projection';\nimport {\n    getViewBoxFromElement,\n    getSvgBoundaries,\n    makeSvgElementSquare,\n    updateSvgElementViewBox,\n    getLatLonBoundsFromViewBox,\n} from '../utils/svgUtils';\nimport { getRelativePosition } from '../utils/proportions';\nimport './style.css';\n\nclass CountrySvg extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            loading: true,\n            svg: null,\n        };\n        this.svgRef = React.createRef();\n        this.initSvg = this.initSvg.bind(this);\n        this.initRegion = this.initRegion.bind(this);\n        this.onRegionChange = this.onRegionChange.bind(this);\n    }\n\n    componentDidMount() {\n        this.initSvgTimeout = setTimeout(this.initSvg);\n    }\n\n    static getDerivedStateFromProps(props, state) {\n        if(props.limitedViewBox && state.lastUsedViewBox && (props.limitedViewBox.toString() !== state.lastUsedViewBox.toString())) {\n            const newState = getStateFromSvgAndProps(state.svgElement, props);\n            notifySvgChanged({ ...state, ...newState}, props);\n            return newState;\n        }\n        return {};\n    }\n\n    render() {\n        return (\n            <div className='CountrySvg'>\n                {\n                    this.state.loading &&\n                    <div> Loading... </div>\n                }\n                <div className='CountrySvg-inner'>\n                    {\n                        this.props.allowSelectArea && this.state.regionReady &&\n                        <div className='CountrySvg-areaSelector'>\n                            <RegionSelect\n                                maxRegions={1}\n                                regions={ this.state.regions }\n                                constraint={ true }\n                                onChange={ this.onRegionChange }>\n                                <div className='CountrySvg-areaSelector-inner'></div>\n                            </RegionSelect>\n                        </div>\n                    }\n                    {\n                        this.state.svg &&\n                        <div dangerouslySetInnerHTML={this.state.svg}\n                            ref={this.svgRef}\n                        ></div>\n                    }\n                    {\n                        this.canShowDot() &&\n                        <div\n                            className='CountrySvg-dot'\n                            style={this.getDotStyle()}>\n                            {\n                                `Lat ${this.props.latLonToProject.lat}, Lon: ${this.props.latLonToProject.lon}`\n                            }\n                        </div>\n\n                    }\n                </div>\n            </div>\n        );\n    }\n\n    componentWillUnmount() {\n        if(this.initSvgTimeout) {\n            clearTimeout(this.initSvgTimeout);\n            this.initSvgTimeout = null;\n        }\n    }\n\n    initSvg() {\n        this.initSvgTimeout = null;\n        const svgElement = this.getNewSvgElement();\n        this.setState(getStateFromSvgAndProps(svgElement, this.props));\n        notifySvgChanged(this.state, this.props);\n\n        if(this.props.onInitSvgBoundaries) {\n            this.props.onInitSvgBoundaries(getViewBoxFromElement(svgElement));\n        }\n\n        this.initRegion();\n    }\n\n    initRegion() {\n        const initialRegion = {\n            x: 0,\n            y: 0,\n            width: 100,\n            height: 100,\n            data: {},\n        };\n\n        this.setState({\n            regions: [ initialRegion ],\n            regionReady: true,\n            loading: false,\n        });\n\n        if(this.props.onChangeAreaSelection) {\n            this.props.onChangeAreaSelection({ ...initialRegion });\n        }\n    }\n\n    onRegionChange(changes) {\n        const regionChange = changes[0];\n        if(regionChange.isChanging) {\n            this.setState({\n                regions: [{\n                    ...regionChange\n                }],\n            });\n            if(this.props.onChangeAreaSelection) {\n                this.props.onChangeAreaSelection({ ...regionChange });\n            }\n        }\n    }\n\n    canShowDot() {\n        const result = this.props.latLonToProject && this.props.countryInfo && this.svgRef.current;\n        return result;\n    }\n\n    getDotStyle() {\n        const pixelInfo = projectLatLonIntoArea(\n            this.props.latLonToProject,\n            getSvgBoundaries(this.svgRef.current.querySelector('svg')),\n            this.svgRef.current.getBoundingClientRect(),\n        );\n        return {\n            top: `${pixelInfo.y}px`,\n            left: `${pixelInfo.x}px`,\n        };\n    }\n\n    getNewSvgElement() {\n        const svg = geojson2svg()\n            .styles({ MultiPolygon: { fill: '#000000', stroke: 'none' } })\n            .projection((coord) => {\n                const projected = merc.fromLatLngToPoint({ lat: coord[1], lng: coord[0] });\n                return [projected.x, projected.y];\n            })\n            .data(this.props.countryInfo)\n            .render();\n\n        const parser = new DOMParser();\n        return parser.parseFromString(svg, \"image/svg+xml\").querySelector('svg');\n    }\n\n}\n\nfunction getStateFromSvgAndProps(svgElement, props) {\n    if(props.limitedViewBox) {\n        updateSvgElementViewBox(svgElement, props.limitedViewBox);\n    }\n    const lastUsedViewBox = makeSvgElementSquare(svgElement);\n    return {\n        svg: {\n            __html: svgElement.outerHTML,\n        },\n        svgElement,\n        lastUsedViewBox,\n    };\n}\n\nfunction projectLatLonIntoArea(latlon, svgBoundaries, boundingBox) {\n    const { minX, minY, maxX, maxY } = svgBoundaries;\n    const { x, y } = merc.fromLatLngToPoint({ lat: latlon.lat, lng: latlon.lon });\n    const relativeX = getRelativePosition(x, minX, maxX);\n    const relativeY = getRelativePosition(y, minY, maxY);\n    return {\n        x: relativeX * boundingBox.width,\n        y: relativeY * boundingBox.height,\n    };\n}\n\nfunction notifySvgChanged(state, props) {\n    if(props.onChangeSvgDisplayed) {\n        props.onChangeSvgDisplayed({\n            svg: state.svg.__html,\n            viewBox: state.lastUsedViewBox,\n            latLonBounds: getLatLonBoundsFromViewBox(state.lastUsedViewBox),\n            countryCode: props.countryInfo.country_code,\n        });\n    }\n}\n\nCountrySvg.propTypes = {\n    countryInfo: PropTypes.object.isRequired,\n    latLonToProject: PropTypes.object,\n    allowSelectArea: PropTypes.bool,\n    onInitSvgBoundaries: PropTypes.func,\n    onChangeAreaSelection: PropTypes.func,\n    limitedViewBox: PropTypes.array,\n    onChangeSvgDisplayed: PropTypes.func,\n};\n\nexport default CountrySvg;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport CountrySvg from '../CountrySvg';\nimport { getLimitedViewBoxFromSelection } from '../utils/svgUtils';\n\nimport './style.css';\n\nconst SHOW_TEST_LAT_LON = false;\n\nclass Country extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.updateLat = this.updateLat.bind(this);\n        this.updateLon = this.updateLon.bind(this);\n        this.handleInitSvgBoundaries = this.handleInitSvgBoundaries.bind(this);\n        this.handleChangeAreaSelection = this.handleChangeAreaSelection.bind(this);\n\n        this.state = {\n            latLonToShow: '',\n            lat: '40.415363',\n            lon: '-3.707398'\n        };\n    }\n\n    static getDerivedStateFromProps(props, state) {\n        if(props.predefinedBounds && state.limitedViewBox && (props.predefinedBounds.toString() !== state.limitedViewBox.toString())) {\n            return {\n                limitedViewBox: props.predefinedBounds,\n            };\n        }\n        return {};\n    }\n\n    render() {\n        return (\n            <div className='Country'>\n                <div className='Country-title'>\n                    { this.props.countryInfo.properties.NAME }\n                </div>\n                <div className='Country-maps'>\n                    <CountrySvg\n                        countryInfo={this.props.countryInfo}\n                        allowSelectArea={true}\n                        latLonToProject={ SHOW_TEST_LAT_LON? {\n                            lat: parseFloat(this.state.lat),\n                            lon: parseFloat(this.state.lon),\n                        } : null }\n                        onInitSvgBoundaries={ this.handleInitSvgBoundaries }\n                        onChangeAreaSelection={ this.handleChangeAreaSelection }\n                    />\n                    {\n                        this.state.limitedViewBox &&\n                        <CountrySvg\n                            countryInfo={this.props.countryInfo}\n                            latLonToProject={ SHOW_TEST_LAT_LON? {\n                                lat: parseFloat(this.state.lat),\n                                lon: parseFloat(this.state.lon),\n                            } : null }\n                            limitedViewBox={ this.state.limitedViewBox }\n                            onChangeSvgDisplayed={ this.props.onSvgChanged }\n                        />\n                    }\n                </div>\n                {\n                    SHOW_TEST_LAT_LON &&\n                    <div>\n                        <label>\n                            Lat:\n                            <input value={ this.state.lat } onChange={ this.updateLat } />\n                        </label>\n\n                        <label>\n                            Lon:\n                            <input value={ this.state.lon } onChange={ this.updateLon } />\n                        </label>\n                    </div>\n                }\n            </div>\n        );\n    }\n\n    updateLat(event) {\n        this.setState({\n            lat: event.target.value,\n        });\n    }\n\n    updateLon(event) {\n        this.setState({\n            lon: event.target.value,\n        });\n    }\n\n    handleInitSvgBoundaries(newBounds) {\n        this.setState({\n            svgBounds: newBounds,\n        });\n    }\n\n    handleChangeAreaSelection(newArea) {\n        const limitedViewBox = getLimitedViewBoxFromSelection(this.state.svgBounds, newArea);\n        this.setState({\n            limitedViewBox,\n        });\n    }\n\n}\n\nCountry.propTypes = {\n    countryInfo: PropTypes.object.isRequired,\n    predefinedBounds: PropTypes.array,\n    onSvgChanged: PropTypes.func,\n};\n\nexport default Country;\n","import { sortBy } from 'lodash';\nimport bounds from 'geojson-bounds';\n\nexport const getCountryName = (country) => {\n    return country.properties.NAME || country.properties.name;\n};\n\nexport const processCountries = (countries, maxCountries = -1) => {\n    const unsorted = countries\n        .map(country => Object.assign({}, country, { country_code: getCountryCode(country) }))\n        .filter(country => country.country_code !== null)\n        .filter(country => !shouldRemoveCountry(country));\n    let limited = unsorted;\n    if(maxCountries > -1) {\n        limited = limited.slice(0, maxCountries);\n    }\n    return sortBy(limited, country => getCountryName(country).toLowerCase() );\n};\n\nfunction getCountryCode(country) {\n    if(country.properties.ISO_A2 && country.properties.ISO_A2 !== '-99') {\n        return country.properties.ISO_A2;\n    }\n    if(country.properties.FIPS_10_ && country.properties.FIPS_10_ !== '-99') {\n        return country.properties.FIPS_10_;\n    }\n    if(country.properties.WB_A2 && country.properties.WB_A2 !== '-99') {\n        return country.properties.WB_A2;\n    }\n    if(country.properties.iso_a2 && country.properties.iso_a2 !== '-99') {\n        return country.properties.iso_a2;\n    }\n    if(country.properties.fips_10_ && country.properties.fips_10_ !== '-99') {\n        return country.properties.fips_10_;\n    }\n    if(country.properties.wb_a2 && country.properties.wb_a2 !== '-99') {\n        return country.properties.wb_a2;\n    }\n    return null;\n}\n\nfunction shouldRemoveCountry(country) {\n    const TYPES_TO_REMOVE = ['Dependency', 'Indeterminate'];\n    const countryType = country.properties.TYPE || country.properties.type;\n    return TYPES_TO_REMOVE.includes(countryType);\n\n    // All types:\n    // Country\n    // Dependency\n    // Disputed\n    // Indeterminate\n    // Lease\n    // Sovereign country\n}\n\nexport const getBoundaries = (country) => {\n    return {\n        topLeft: [bounds.yMax(country), bounds.xMin(country)],\n        bottomRight: [bounds.yMin(country), bounds.xMax(country)],\n    };\n};\n\nexport const getLatLonFromString = (latlonString) => {\n    if(!latlonString) {\n        return null;\n    }\n    const [latString, lonString] = latlonString.split(',');\n    return {\n        lat: parseFloat(latString.trim()),\n        lon: parseFloat(lonString.trim()),\n    };\n};\n","import React, { Component } from 'react';\nimport JsonLoader from './JsonLoader';\nimport Country from './Country';\nimport JSZip from 'jszip';\nimport { getCountryName, processCountries } from './utils/geojsonUtils';\nimport { saveAs } from 'file-saver/FileSaver';\nimport {\n    makeSVGExportable,\n} from './utils/svgUtils';\nimport './App.css';\n\nclass App extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            countries: [],\n            filter: '',\n        };\n\n        this.handleJsonLoad = this.handleJsonLoad.bind(this);\n        this.filterChanged = this.filterChanged.bind(this);\n        this.downloadAll = this.downloadAll.bind(this);\n        this.handleSvgChanged = this.handleSvgChanged.bind(this);\n        this.reset = this.reset.bind(this);\n        this.handleBoundsJsonLoad = this.handleBoundsJsonLoad.bind(this);\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    <h1 className=\"App-title\">Country Shape Generator</h1>\n\n                    {\n                        !!this.state.countries.length &&\n                        <button className=\"App-reset button\" onClick={ this.reset }>Reset and start again</button>\n                    }\n\n                    {\n                        !!this.state.countries.length &&\n                        <button className=\"App-download button\" onClick={ this.downloadAll }>Download all</button>\n                    }\n\n                </header>\n                {\n                    !this.state.countries.length &&\n                    <div className=\"App-intro\">\n                        <JsonLoader onLoad={ this.handleJsonLoad } label={\"Load a GeoJsonFile with countries info: \"}/>\n                    </div>\n                }\n                {\n                    !!this.state.countries.length &&\n                    <React.Fragment>\n                        <div className=\"App-tools\">\n\n                            <div>\n                                <JsonLoader onLoad={ this.handleBoundsJsonLoad } label={\"Load custom bounds: \"}/>\n                            </div>\n\n                            <label>\n                                Filter by:\n                                <input className=\"App-tools-filter\" value={ this.state.filter } onChange={ this.filterChanged } />\n                            </label>\n\n                        </div>\n                        <div className=\"App-countries\">\n                            {\n                                this.state.countries\n                                    .filter(country => countryContainsFilter(country, this.state.filter))\n                                    .map((country) =>\n                                        <Country\n                                            key={country.country_code}\n                                            countryInfo={country}\n                                            predefinedBounds={ this.getPredefinedBoundsForCountry(country.country_code) }\n                                            onSvgChanged={ this.handleSvgChanged }\n                                        ></Country>\n                                    )\n                            }\n                        </div>\n                    </React.Fragment>\n                }\n            </div>\n        );\n    }\n\n    handleJsonLoad(geojson) {\n        // TODO check geojson is correct\n        this.setState({\n            countries: processCountries(geojson.features) // .filter(country => country.properties.NAME === 'Spain'),\n        })\n    }\n\n    filterChanged(event) {\n        this.setState({\n            filter: event.target.value,\n        });\n    }\n\n    downloadAll() {\n        const svgsInfo = Object.values(this.allSvgs)\n            .map((svgInfo) => {\n                return {\n                    ...svgInfo,\n                    svg: makeSVGExportable(svgInfo.svg),\n                };\n            });\n        const boundsInfo = getBoundsInfo(svgsInfo);\n        const zip = new JSZip();\n        zip.file('bounds.json', boundsInfo);\n        svgsInfo.forEach((svgInfo) => {\n            zip.file(`${svgInfo.countryCode}.svg`, svgInfo.svg);\n        });\n        zip.generateAsync({type:\"blob\"})\n            .then((blob) => {\n                saveAs(blob, \"svgs_and_bounds.zip\");\n            }, (err) => {\n                console.warn(err);\n            });\n    }\n\n    handleSvgChanged(changeInfo) {\n        this.allSvgs = this.allSvgs || {};\n        this.allSvgs[changeInfo.countryCode] = changeInfo;\n    }\n\n    reset() {\n        this.setState({\n            countries: [],\n        });\n    }\n\n    handleBoundsJsonLoad(bounds) {\n        this.setState({\n            predefinedBounds: bounds,\n        });\n    }\n\n    getPredefinedBoundsForCountry(countryCode) {\n        if(this.state.predefinedBounds && this.state.predefinedBounds[countryCode]) {\n            return this.state.predefinedBounds[countryCode].viewBox;\n        }\n        return null;\n    }\n\n}\n\nfunction getBoundsInfo(svgsInfo) {\n    const json = {};\n\n    svgsInfo.forEach((countryInfo) => {\n        json[countryInfo.countryCode] = {\n            latLonBounds: countryInfo.latLonBounds,\n            viewBox: countryInfo.viewBox\n        };\n    });\n\n    return JSON.stringify(json, undefined, 2);\n}\n\nfunction countryContainsFilter(country, filter) {\n    if(!filter) {\n        return true;\n    }\n    const countryName = getCountryName(country);\n    return countryName.toLowerCase().indexOf(filter.toLowerCase()) !== -1;\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}